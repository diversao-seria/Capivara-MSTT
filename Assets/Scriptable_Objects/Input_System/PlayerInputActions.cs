//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scriptable_Objects/Input_System/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""19f85eeb-e1d7-4897-b6f0-2c40f5dbda89"",
            ""actions"": [
                {
                    ""name"": ""Reiniciar"",
                    ""type"": ""Button"",
                    ""id"": ""ed718c0a-8b58-45a4-9ff1-44388e3715b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movimentacao"",
                    ""type"": ""Button"",
                    ""id"": ""57083671-e258-4419-bc3e-1a9c0f119127"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfd5a1c5-67da-4f94-8681-761376d3aff5"",
                    ""path"": ""<Keyboard>/#(R)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reiniciar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4544e79e-417d-4dda-98fb-3f0f23e37b4d"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0889660b-65c4-404c-a54f-7bb6011eba00"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1b90743-1270-4ee3-afcd-d1400a8d25b0"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""211dbf7f-d962-44c7-9183-83c2787239cb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3b5fad72-ca8e-4ca1-b436-4a13dc54a27d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""New control scheme"",
                    ""action"": ""Movimentacao"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MSTT"",
            ""id"": ""e1cb488c-842c-4e64-a846-0a109337e035"",
            ""actions"": [
                {
                    ""name"": ""InputO"",
                    ""type"": ""Button"",
                    ""id"": ""cb25f573-3900-416c-a5bf-e21f93a68b0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InputI"",
                    ""type"": ""Button"",
                    ""id"": ""347dec6f-e6f1-415f-a607-646416d0c20f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cf3545fd-6380-43c6-838a-55ec7027805a"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13567281-98bd-4b6b-baf7-3b024f7090c1"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""18790231-1ac8-4d2b-94f8-231c09e57b5a"",
            ""actions"": [
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""9a0f2b7b-4f79-491f-9a8e-fa1417e2b105"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c386d07-4f08-4b5c-80d0-245b024448d5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Reiniciar = m_Player.FindAction("Reiniciar", throwIfNotFound: true);
        m_Player_Movimentacao = m_Player.FindAction("Movimentacao", throwIfNotFound: true);
        // MSTT
        m_MSTT = asset.FindActionMap("MSTT", throwIfNotFound: true);
        m_MSTT_InputO = m_MSTT.FindAction("InputO", throwIfNotFound: true);
        m_MSTT_InputI = m_MSTT.FindAction("InputI", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Mouse = m_UI.FindAction("Mouse", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Reiniciar;
    private readonly InputAction m_Player_Movimentacao;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reiniciar => m_Wrapper.m_Player_Reiniciar;
        public InputAction @Movimentacao => m_Wrapper.m_Player_Movimentacao;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Reiniciar.started += instance.OnReiniciar;
            @Reiniciar.performed += instance.OnReiniciar;
            @Reiniciar.canceled += instance.OnReiniciar;
            @Movimentacao.started += instance.OnMovimentacao;
            @Movimentacao.performed += instance.OnMovimentacao;
            @Movimentacao.canceled += instance.OnMovimentacao;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Reiniciar.started -= instance.OnReiniciar;
            @Reiniciar.performed -= instance.OnReiniciar;
            @Reiniciar.canceled -= instance.OnReiniciar;
            @Movimentacao.started -= instance.OnMovimentacao;
            @Movimentacao.performed -= instance.OnMovimentacao;
            @Movimentacao.canceled -= instance.OnMovimentacao;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MSTT
    private readonly InputActionMap m_MSTT;
    private List<IMSTTActions> m_MSTTActionsCallbackInterfaces = new List<IMSTTActions>();
    private readonly InputAction m_MSTT_InputO;
    private readonly InputAction m_MSTT_InputI;
    public struct MSTTActions
    {
        private @PlayerInputActions m_Wrapper;
        public MSTTActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputO => m_Wrapper.m_MSTT_InputO;
        public InputAction @InputI => m_Wrapper.m_MSTT_InputI;
        public InputActionMap Get() { return m_Wrapper.m_MSTT; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MSTTActions set) { return set.Get(); }
        public void AddCallbacks(IMSTTActions instance)
        {
            if (instance == null || m_Wrapper.m_MSTTActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MSTTActionsCallbackInterfaces.Add(instance);
            @InputO.started += instance.OnInputO;
            @InputO.performed += instance.OnInputO;
            @InputO.canceled += instance.OnInputO;
            @InputI.started += instance.OnInputI;
            @InputI.performed += instance.OnInputI;
            @InputI.canceled += instance.OnInputI;
        }

        private void UnregisterCallbacks(IMSTTActions instance)
        {
            @InputO.started -= instance.OnInputO;
            @InputO.performed -= instance.OnInputO;
            @InputO.canceled -= instance.OnInputO;
            @InputI.started -= instance.OnInputI;
            @InputI.performed -= instance.OnInputI;
            @InputI.canceled -= instance.OnInputI;
        }

        public void RemoveCallbacks(IMSTTActions instance)
        {
            if (m_Wrapper.m_MSTTActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMSTTActions instance)
        {
            foreach (var item in m_Wrapper.m_MSTTActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MSTTActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MSTTActions @MSTT => new MSTTActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Mouse;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse => m_Wrapper.m_UI_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnReiniciar(InputAction.CallbackContext context);
        void OnMovimentacao(InputAction.CallbackContext context);
    }
    public interface IMSTTActions
    {
        void OnInputO(InputAction.CallbackContext context);
        void OnInputI(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnMouse(InputAction.CallbackContext context);
    }
}
